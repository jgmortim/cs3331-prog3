                                    README

Question 1:

There are no race conditions in the even-odd sort. This is because at any given
time, no two threads are accessing (or modifying) the same data. To elaborate,
none of the threads for the even pass work on the same indexes in the array.
Likewise, none of the threads for the odd pass work on the same indexes in the
array. Additionally, the even pass and the odd pass do not (cannot) happen at
the same time, so there is no concurrent overlap between the two.

Question 2:

Proof of correctness:
On every iteration, the elements of every index are compared with the elements
at the indexes to the left and right (except for the first and last index which
only have one neighbor to compare with). If any pair of elements are found to
be out of order, they are swapped. This continues until there is an iteration
with no swaps. If no swap occur, then for every element x[i], it is certain that
x[i-1] < x[i] and x[i] < x[i+1]. If either of these were not true a swap would
have occurred.

Proof of <= n iterations:
The worst case scenario is that an element is on the wrong end of the array
(i.e, the largest element is first or the smallest element is last). In this
case it will take n-1 swaps to move the element the n-1 positions needed to put
it in the appropriate index. In each iteration, an incorrectly placed element
will move either one or two position (the even pass, the odd pass, or both will
swap the element with a neighbor). In the worst case, the element moves one
index per iteration, in this case it will take n-1 iterations for the element
to reach it's final position. Additionally, one more iteration (with no swaps)
is need to confirm that all elements are in the correct indexes. Therefore, the
worst case is n iterations.   

Question 3:

It is possible to use only n/2 threads per iteration. On each iteration, thread
k is able to perform an even pass comparing x[k-1] and x[k]. However, before
thread k can perform its odd pass (with x[k] and x[k+1]), thread k+2 must
perform its even pass (with x[k+1] an x[k+2]). Basically, for a thread to
perform its odd pass, it must first make sure both indexes it needs to compare
have already been compared in an even pass. 
An easy way to accomplish this would be to use a separate array of size n. This
array, p[], should be inialized to all 0s. Then after an even pass, thread k
will set p[k-1] and p[k] equal to 1. Then thread k waits for p[k] and p[k+1] to
both be one before performing its odd pass. After the iteration, p[] is reset
to all zeros.
This should work as it prevents race conditions such that no thread can access
or modify the elements being compared by another thread. The correctness
follows from the proof of correctness from Question 2.

Question 4:

Using the idea from Question 3, An even pass by thread k sets p[k-1] and p[k]
equal to 1 and an odd pass sets p[k] and p[k+1] equal to 0. p[0] can be ignored
as x[0] never used by an odd pass. Additionally, if n is even, p[n-1] can be
ignored for the same reason. Each thread will also need to keep track of the
number of iterations it completes. Thus a thread k can perform an even pass
whenever p[k-1] and p[k] are both 0 and thread k and thread k-2 have both
completed the same number of iterations. Likewise a thread k can perform an odd
pass whenever p[k] and p[k+1] are both 1 and thread k and thread k+2 have both
completed the same number of iterations.
We will also introduce a global array s[] of size n. Each index, i, of s[] will
hold the number of swap for iteration i. After every thread has completed
iteration j, the program will check s[j]. If s[j] is 0, no swaps occurred in
that iteration and the array is sorted. Main would then be free to terminate
each thread.
Arrays s[] and p[] prevent race conditions within and between iterations.

Example:

Initial: |7|1|3|2|8|4|5|9|
         |1|7|2|3|? ?|5|9|  iter: 1 even pass
         |1|2|7|? ? ? ? ?   iter: 1 odd pass
         |1|2|? ? ? ? ? ?   iter: 2 even pass

In the diagram it can be seen that one of the threads has not completed its
even pass (for 8 and 4) in iteration 1. However, this does not prevent other
threads from continuing where they are able.


